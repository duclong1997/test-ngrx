kubernete:
-giúp tạo ra các service quản lý các service có sự liên kết với nhau trên hệ thống ứng dụng micrro service.
việc tạo các service dựa trên các deployment có bao gồm các container (trên docker hug) giúp các container có thể liên kết và tác động đến nhau.
tạo thành 1 mạng lưới. ngoài ra có thể loadbalancer giữa các external service và tạo ra nhiều pod để nếu như 1 pod có gặp vấn đề thì pod khác vẫn
có thể hoạt động thay pod đó. có thể debug và xem logs của các service, pod trên kubectl khi có vấn đề xảy ra với hệ thống.

-get node của kubernete: kubectl get nodes
-check pod: kubectl get pod ( -o wide )
-check service: kubectl get service
để có thể tương tác đến pod cần tạo ra Deployment, nó là tầng trừu tượng
của pod nó là thứ cần được tạo ra

deployment: là nơi dùng để cấu hình 1 container, image sẽ được thực thi trong kubernete

-check các replica: kubectl get replicaset ( dùng để xem các bản sao deployment,
servive được copy khi file config cấu hình)
replica cho phép bạn build nhiều bản container giống hệt nhau để khi 1 container có vấn đề
thì bản kia sẽ được thay thế.

-sửa deployment: kubectl edit deployment name-deployment
-lấy ra deployment: kubectl get deploymnet ( -o wide )
-xoá deployment: kubectl delete deployment name-deployment
-apply file cấu hình để tạo hoặc sửa deployment hoặc service trong kubernete: kubectl apply -f file-name.yaml
-xoá với file cấu hình : kubectl delete -f file-name.yaml


debug:
-view log pod: kubectl logs name-pod

service:
-check các service: kubectl get services
-xem chi tiết service: kubectl describe service name-service

namespace: là khu vục dùng để quản lý các nguồn tài nguyên (deploy, service, pod,...) trong các namespace,
nó giống như một không gian ảo bên trong của kubernete.
namespace default là nơi bạn có thể sử dụng , sửa đổi resources nếu như bạn không tạo thêm newspace

lấy ra toàn bộ cac namespace: kubectl get namespace.
thêm mới namespace: kubectl create namespace name-namespace
hoặc có thể tạo namespace sử dụng config-map

cách sử dụng namespace:
-nếu như bạn có một ứng dụng phức tạp, có nhiều deploy, replicaset,....
-nếu như có nhiều team cùng tạo ra ứng dụng giống nhau trong cùng 1 namespace nhưng chúng khác nhau về config
-chia sẻ tài nguyên như nginx, db, elasticsearch,.. với những deploy khác nhau như staging or deployment
-giớI hạn quyền truy cập, tài nguyên ở trên namespace.

không thể truy cập 1 cách trực tiếp từ namespace này sang namespace khác (cần phải có config map mới có thể thực hiện truy cập được)
có một vài thành phần (components) không thể được tạo trong namespace (ví dụ: volume, node)
-check chi tiết file config map (-o yaml)

ingress:
-được sử dụng để có sự bảo mật trong kết nối với (https)
- giúp cho IP address và port không bị lộ.

check ingress: kubect get ingress

helm:
có cặp tính năng chính
- nó giống như package manager for kubernete. Giúp quản lý những file yml và phân tán chúng ở repository public or private.
nói 1 cách đơn giản là muốn build 1 hộ thống chúng ta cần rất nhiều file yml và chúng ta sẽ package những file đó lại thành package
và đặt chúng ở nơi lưu trữ nào đó,và những người khác cũng có thể sử dụng lại package đó thay vì phải tạo lại từ đầu tất cả.
việc này giúp những người khác tiết kiệm effort.
- là template engine giúp cho việc viết các image, service hay develop trở nên nhanh, và link động, thông qua bản vẻ đã được thiết kế sẵn.
nhờ bản vẻ để có thể tạo ra được các image, service, deployment 1 cách nhanh chóng và tránh được sự sai sót hay thiếu xót.
-cung cấp 1 cách đơn giản để có thể setup replease management.

pod:
-là thành phần nhỏ nhất trong kubernate, nó không phải container, pod sẽ thường chứa đựng 1 container chính, nó chỉ có 1 app main run bên trong
-tất cả các pod đều có unique(duy nhất) ipaddress
-ip address có thể được tác động đến từ tất cả các pod khác trong cluster.
nó có thể giúp chúng ta có thể chạy được nhiều app trên cùng 1 host với port khác nhau mà các hệ thống bình thường không làm đƯợc về vấn đề quản lý
port
-pod sẽ giống như small machine with owner ipaddress và thường với 1 container chính run trong
- điều đó có nghĩa là 1 server có thể chạy được 10 microservice app và tất cả chúng chạy trên cùng 1 port
-không phải lo lắng về vấn đề conflict vì tất cả chúng  chạy trên những hệ thống cô lập của chính nó.
-có thể dễ dàng thay thế các container runtime in kubernate

có thể đặt nhiều container trong 1 pod khi bạn muốn run 1 app phụ hoặc helper trong main app
ví dụ khi bạn có nhiều db và các db sẽ có sự backup hoặc động bộ với nhau
- các container giao tiếp với nhau trong 1 pod thông quan các port ( giống với việc bạn run nhiều ứng dụng trên laptop của bạn)

post container thường có trên mỗi pot được gọi là sandbox container
và nó chỉ có 1 công việc đó là reserve (dự trữ) hoặc la hold (giữ) pots network namespace, nó được chia sẻ bởi toàn bộ container in a pot
cho nên container pots có thể cho containers để giao tiếp với những cái khác, nếu như có 1 container die, thì nó sẽ được tạo pot và đặt vào ở
ip address đó, nhưng nếu pot die thì nó sẽ tạo mới 1 pot và với 1 id address khác.

volume:
có 3 component:
persitent volume
persistent volume claim
storage class

storage sẽ không phụ thuộc vào pod lifecycle
+persistent colume:
giống như cluster resource like ram or cpu đưỢc sử dụng để lưu trữ dữ liệu
cách tạo ra sử dụng bằng file yaml.
phải lưu trữ từ bộ lưu trữ vật lý như là ổ cứng từ node cluster có thể như AWS, cloud
kubernate sẽ không quan tâm về storage thực tế mà nó sẽ cho bạn persistent volume componet giống như cách thực để bạn có thể tương tác với
storage
cái thứ developer quan tân đó là type of storage your cluster hoặc app.
viêc quan tâm ở đây đó là phải backup và không để cho nó currupt (gây rối)
persistent volume không có namespace, out of namespace, chúng là toàn bộ cluster đến namespace

+persistent volume claim:
những ứng dụng khác yêu cầu đến persistent volume ( có nghĩa là các app yêu cầu tương tác đến persistent volume thông qua persistent volume claim)
khi cấu hình persistent volume claim trong pod thì:
-pod sẽ request đến pvc
-sau đó pvc sẽ tìm kiếm 1 persistent thoả mãn trong cluster.
-với việc như thế này thì pod đã có thể sử dụng actual storage (storage resource) in back-end
chú ý:
claim và pod sẽ phải tồn tại trong cùng 1 spacename
điều đó có nghĩa là claim được gắn kết trong pod
khi 1 pod bị die thì sẽ có 1 pod mới được thay thế và nó vẫn sẽ access đế same storage và có thể biết được toàn bộ các thay đổi của
pod trước hoặc container trước

admin thì sẽ cung cấp persistent volume
developer thì sẽ tạo ra persistent volume claim để có thể kết nối đến persistent volume

storage class:
tạo ra hoặc cung cấp ra những persistent volume dynermically (linh động), bất cứ khi nào pvc yêu cầu nó.
đây là cách tạo ra và cung câp volume trong cluster 1 cách tự động.
luồng thực hiện với storage class:
-pod sẽ yêu cầu đến pvc (persistent volume claim)
-pvc sẽ request từ storage class
-storage class sẽ cung cấp hoặc tạo ra persistent volume, để pvc có thể tìm thấy pv
-sử dụng provisioner từ bộ lưu trữ thực tế ở dưới back-end

sự khác nhau giữa docker và kubernete:
docker:
-container, isolated environment ( độc lập về môi trưƠng), cho app
-auto build and develop app by CI
-is platform for configure, build, and distribute container.

kubernete:
-thì là 1 cơ sở hạ tầng, chịu trách nhiệm quản lý nhiều container.
-auto schedule and management of container after container deploy
-là hệ sinh thái cho việc quản lý các cluster của docker container.


docker swarm:
-dễ dàng install
-rõ ràng hơn, dễ dàng trong cách sử dụng, nhưng giới hạn về tính năng mang lại.
-mở rộng thủ công.
-cần công cụ của bên thứ 3 để giảm sát
- auto load balancer
- được tích hợp trong docker CLI

kubernete:
-phức tạp hơn
-phực tạp trong quá trình học tập, nhưng đổi lại hệ thống mạnh mẽ hơn.
-hỗ trọ việc tự động mở rộng
-building có sự monitor (giám sát)
- cấu hình load balancer 1 cách tự động.
-cần học nhiều hơn về tool CLI riêng biết.

file configmap and secret phải được tạo và tồn tại trước pod start in kubernete


StatefulSet:
nó là thành phần criminale được sử dụng chuyên dụng cho statefull application (database, elasticsearch, mongoDB)
nó có thể được replica (tạo ra bản sao)
nhưng bảo sao đó không thể được tạo ra, xoá đi ở tại 1 thời điểm.
không thể random id address.
replica pods không thể đinh danh (identity)
sticky identity (xác định, gán) định danh cho mỗi pod
chúng được tạo ra từ same specification, nhưng không thể interchangable (chuyển đổi)
nhứng identity được định danh cố định qua bất cứ sự thay đổi re-scheduling. (có nghĩa là 1 pod bị die thì pod mới được thay
thế thì pod đó vẫn giữ identity đó)
khi replica thì data base sẽ được clone ra 1 database mới với data giống nhau.
-Nhưng nếu bạn cho phép 2 instance không có sự phụ thuộc tác động (read and write) cùng tác động vào same data thì sẽ
gây ra sự mâu thuẫn trong dữ liệu mà gây ra sự bất đồng bộ hệ thống và data.
để giải quyết vấn đề này thì sẽ chỉ có 1 poll (cái đầu) đƯợc phép write and read vào db và những instance khác thì chỉ đƯợc
phép read từ same data.
-pot đươc phép write in db được gọi là master và những pot khác được gọi là slayer.
những pot này không được sử dụng nơi lưu trữ vật lý giống nhau nhưng chúng lại sử dụng same data.
mỗi chúng sẽ lại có 1 relica storage có thẻ truy cập cho chính nó. Điều đó có nghĩa là mỗi pot ử bất cứ thời điểm nào sẽ có 1
same data với những pot khác. để có thể đạt được điều đó thì cần có sự liên tục đồng bộ data
master là pot duy nhất cho phép sự thay đổi data và các slayer sẽ cần biết đến mỗi sự thay đổi,
chúng sẽ thực hiện update data storage, được cập nhật cho next query request
nguyên tắc: khi master thực hiện change data thì tất cả các slayer sẽ đượC cập nhật storage của nó và sẽ giữ sự động bộ
và chắc chắn rằng mỗi pod sẽ có data giống nhau.
khi có 1 slave mới thì nó sẽ được lấy ở temporary storage
với stemporary thì dữ liệu sẽ không được cố đỊnh, bởi vì data của nó được nhận dữ liệu bản sao giữa các pots
nhưng nếu toàn bộ pots die thì dữ liệu cũng sẽ mất
-best practice cho việc sử dụng data persistence đổi với stateful applications
nếu như mất data thì sẽ không truy cập đó là trường hợp đa số trong ứng dụng db.
persistent storage data sẽ được tồn tại nếu như toàn bộ các pod die hoặc nếu như bạn xoá thành công stateful set component
và toàn bộ pod sẽ được clear. toàn bộ persistent và data sẽ được đảm bảo, ở lại. Bởi vì persistent volume lifecycle đã bị mất
kết nối đến lifecycle của các component khác như deplyment or stateful

